{"version":3,"sources":["components/Header.js","components/Action.js","components/DinnerOption.js","components/DinnerOptions.js","components/NewOption.js","components/Modal.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","Action","props","onClick","handlePick","disabled","hasOptions","DinnerOption","index","dinner","handleRemoveOption","DinnerOptions","handleRemoveAll","options","length","map","option","key","NewOption","state","error","undefined","handleSubmit","e","preventDefault","target","elements","value","trim","handleNewOption","setState","this","onSubmit","type","name","Component","ReactModal","setAppElement","document","getElementById","Modal","isOpen","selectedOption","onRequestClose","handleClearSelection","contentLabel","closeTimeoutMS","App","optionToRemove","filter","indexOf","prevState","concat","randomNum","Math","floor","random","json","localStorage","getItem","JSON","parse","prevProps","stringify","setItem","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45b27c6e.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n  return (\n    <div className=\"header\">\n      <div className=\"container\">\n        <h1>\n          What's For Dinner?\n        </h1>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Action(props) {\n  return (\n    <div>\n      <button \n        className=\"big-button\"\n        onClick={props.handlePick}\n        disabled={!props.hasOptions}\n      >\n        Choose for me!\n      </button>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function DinnerOption(props) {\n  return (\n    <div className=\"option\">\n      <p className=\"option__text\">{props.index}. {props.dinner}</p>\n      <button \n        className=\"button button--link\"\n        onClick={() => props.handleRemoveOption(props.dinner)}\n      >\n        Remove\n      </button>\n    </div>\n  )\n}\n","import React from 'react'\nimport DinnerOption from './DinnerOption'\n\nexport default function DinnerOptions(props) {\n  return (\n    <div>\n      <div className=\"widget-header\">\n        <h3 className=\"widget-header__title\">Your Options</h3>\n        <button className=\"button button--link\" onClick={props.handleRemoveAll}>Remove All</button>\n      </div>\n      {props.options.length === 0 && <p className=\"widget__message\">Please add some options to get started.</p>}\n      {props.options.map((option, index) => (\n        <DinnerOption \n          key={option} \n          dinner={option} \n          index={index + 1}\n          handleRemoveOption={props.handleRemoveOption}\n        />\n      ))}\n    </div>\n  )\n}\n        ","import React, { Component } from 'react'\n\nexport class NewOption extends Component {\n  state = {\n    error: undefined\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    const option = e.target.elements.option.value.trim()\n    const error = this.props.handleNewOption(option)\n    this.setState(() => ({ error }))\n    e.target.elements.option.value = ''\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.error && <p className=\"new-option-error\">{this.state.error}</p>}\n        <form className=\"new-option\" onSubmit={this.handleSubmit}>\n          <input className=\"new-option__input\" type=\"text\" name=\"option\"/>\n          <button className=\"button\">\n            Add option\n          </button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default NewOption\n","import React from 'react';\nimport ReactModal from 'react-modal';\n\nReactModal.setAppElement(document.getElementById('root'));\n\nconst Modal = (props) => (\n  <ReactModal\n    isOpen={!!props.selectedOption}\n    onRequestClose={props.handleClearSelection}\n    contentLabel={`Selected option is ${props.selectedOption}`}\n    closeTimeoutMS={50}\n    className=\"modal\"\n  >\n    <h2 className=\"modal__title\">Randomly Selected Option:</h2>\n    <p className=\"modal__body\">{props.selectedOption}</p>\n    <button \n      className=\"button\"\n      onClick={props.handleClearSelection}\n    >\n      Close\n    </button>\n  </ReactModal>\n)\n\nexport default Modal","import React, { Component } from 'react'\nimport Header from './Header'\nimport Action from './Action'\nimport DinnerOptions from './DinnerOptions'\nimport NewOption from './NewOption'\nimport Modal from './Modal'\n\nexport default class App extends Component {\n  state = {\n    options: [],\n    selectedOption: undefined\n  }\n\n  componentDidMount() {\n    try {\n      const json = localStorage.getItem('options')\n      const options = JSON.parse(json)\n\n      if (options) {\n        this.setState(() => ({ options }))\n      }\n    } catch (error) {\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(prevState.options.length !== this.state.options.length) {\n      const options = JSON.stringify(this.state.options)\n      localStorage.setItem('options', options)\n    }\n  }\n\n  handleRemoveOption = (optionToRemove) => {\n    this.setState(() => ({ options: this.state.options.filter(option => {\n      return optionToRemove !== option\n    })}))\n  }\n  \n  handleRemoveAll = () => {\n    this.setState(() => ({ options: [] }))\n  }\n\n  handleNewOption = (option) => {\n    if (!option) {\n      return 'Please enter a valid option.'\n    } else if (this.state.options.indexOf(option) > -1) {\n      return 'This option already exists. Please enter a different option.'\n    }\n\n    this.setState((prevState) => ({ options: prevState.options.concat(option) }))\n  }\n\n  handlePick = () => {\n    const randomNum = Math.floor(Math.random() * this.state.options.length)\n    const option = this.state.options[randomNum]\n    this.setState(() => ({ selectedOption: option }))\n  }\n\n  handleClearSelection = () => {\n    this.setState(() => ({ selectedOption: undefined }))\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container\">\n          <Action \n            handlePick={this.handlePick}\n            hasOptions={this.state.options.length > 1}\n          />\n          <div className=\"widget\">\n            <DinnerOptions \n              options={this.state.options}\n              handleRemoveAll={this.handleRemoveAll}\n              handleRemoveOption={this.handleRemoveOption}\n            />\n            <NewOption \n              handleNewOption={this.handleNewOption}\n            />\n          </div>\n        </div>\n        <Modal \n          selectedOption={this.state.selectedOption}\n          handleClearSelection={this.handleClearSelection}\n        />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css/normalize.css'\nimport './styles/styles.scss'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}